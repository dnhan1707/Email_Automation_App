<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Include Quill CSS -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <link rel="stylesheet" href="/styles/compose_email.css">
    
    <!-- Include Quill JavaScript -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

    <title>Modify Page</title>
</head>
<body>
    <form id="emailForm" action="/send_email" method="post">
        <div>
            <label for="subject">Subject:</label>
            <input type="text" id="subject" name="subject" value="<%=emails.subject  %>">
        </div>
        
        <div>
            <label for="text_part">Text Part:</label>
            <div id="editor" style="height: 200px;"></div>
        </div>

        <!-- <div>
            <label for="excelFile">Upload Customer Contacts:</label>
            <input type="file" id="excelFile" name="excelFile">
        </div> -->

        <input type="hidden" id="modifiedHtmlContent" name="modifiedHtmlContent">
        <input type="hidden" id="imageDataArray" name="imageDataArray">
        <input type="hidden" id="pureHtml" name="pureHtml">
        <input type="hidden" id="email_id" name="email_id" value="<%=emails.id  %>">
        
        <% if(emails.status === 'saved') {%>
            <button type="submit" name="status" value="sent">Send Email</button>
            <button type="submit" name="status" value="saved">Save Email</button>
            <% } %>



    </form>

    
    <script>
        var toolbarOptions = [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['blockquote', 'code-block'],

            [{ 'header': 1 }, { 'header': 2 }],               // custom button values
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
            [{ 'direction': 'rtl' }],                         // text direction

            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'font': [] }],
            [{ 'align': [] }],

            ['clean'],                                         // remove formatting button

            ['link', 'image']
            ];
        var initialHtmlContent = `<%- JSON.stringify(emails.body) %>`;

        var quill = new Quill('#editor', {
            theme: 'snow',
            modules: {
                toolbar: toolbarOptions
            },
        });

        // Set the initial HTML content
        quill.clipboard.dangerouslyPasteHTML(initialHtmlContent);

        document.getElementById('emailForm').addEventListener('submit', function () {
        let justHtml = quill.root.innerHTML;
        document.getElementById('pureHtml').value = justHtml;

        // Process the HTML content to meet Maijet API requirements
        let processedHtml = processHtmlForMaijet(justHtml);

        // Set the processed HTML content in the hidden input field
        if(checkIfOnlyHasImg(justHtml)){
            document.getElementById('modifiedHtmlContent').value = processedHtml["modifiedHtmlContent"];
            document.getElementById('imageDataArray').value = processedHtml["imageDataArray"];
        }

        else{
            document.getElementById('modifiedHtmlContent').value = justHtml;
            document.getElementById('imageDataArray').value = "[]";

        }
    });
    
    function processHtmlForMaijet(htmlContent) {
        if (checkIfOnlyHasImg(htmlContent)) {
            return processHtmlWithImg(htmlContent);
        }

    return htmlContent;
    }


    function checkIfOnlyHasImg(htmlContent){
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;
        const imgElements = tempDiv.querySelectorAll('img');
        return imgElements.length > 0;
    }


    function processHtmlWithImg(htmlContent)
    {
        let modifiedHtmlContent = htmlContent;
        let imageDataArray = [];

        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;
        const imgElements = tempDiv.querySelectorAll('img');
        let counter = 1;
        imgElements.forEach((imgElement) => {
            const base64ImageData = imgElement.getAttribute('src');
            const contentType = base64ImageData.split(';')[0].split(':')[1];
            const base64DataWithoutPrefix = base64ImageData.replace(/^data:image\/\w+;base64,/, '');
            const contentID = `id${counter}`;
            const filename = imgElement.getAttribute('alt') || `image${counter}.${contentType.split('/')[1]}`;
            imageDataArray.push({
                ContentType: contentType,
                Filename: filename,
                ContentID: contentID,
                Base64Content: base64DataWithoutPrefix
            });
        counter++;
        });

        imageDataArray.forEach((imageData, index) => {
            const placeholder = `cid:id${index + 1}`;
            const imgTag = `<img src=\\"${placeholder}\\">`;
            const base64DataToReplace = `<p><img src="data:${imageData.ContentType};base64,${imageData.Base64Content}"></p>`;
            modifiedHtmlContent = modifiedHtmlContent.split(base64DataToReplace).join(imgTag);
        });

        imageDataArray = JSON.stringify(imageDataArray);

        return {
            modifiedHtmlContent: modifiedHtmlContent,
            imageDataArray: imageDataArray
        };
        
    }

    </script>
</body>
</html>